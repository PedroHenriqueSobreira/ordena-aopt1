#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

void selectionSort(int arr[], int n) {
    int min_idx;
    for (int i = 0; i < n - 1; i++) {
        min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        swap(&arr[min_idx], &arr[i]);
    }
}

void insertionSort(int arr[], int n) {
    int chave, j;
    for (int i = 1; i < n; i++) {
        chave = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > chave) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = chave;
    }
}

void preencherAleatoriamente(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Números aleatórios entre 0 e 999
    }
}

void imprimirVetor(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    srand(time(NULL)); 

    int tamanhos[] = {1000, 2000, 3000, 4000}; 
    int num_tamanhos = sizeof(tamanhos) / sizeof(tamanhos[0]);

    printf("Tamanho do Vetor\tBubble Sort\tSelection Sort\tInsertion Sort\n");

    for (int k = 0; k < num_tamanhos; k++) {
        int n = tamanhos[k];
        int vetor1[n], vetor2[n], vetor3[n]; 

    
        preencherAleatoriamente(vetor1, n);
        for (int i = 0; i < n; i++) {
            vetor2[i] = vetor1[i];
            vetor3[i] = vetor1[i];
        }

      
        clock_t inicio_bubble = clock();
        bubbleSort(vetor1, n);
        clock_t fim_bubble = clock();
        double tempo_bubble = (double)(fim_bubble - inicio_bubble) / CLOCKS_PER_SEC;

       
        clock_t inicio_selection = clock();
        selectionSort(vetor2, n);
        clock_t fim_selection = clock();
        double tempo_selection = (double)(fim_selection - inicio_selection) / CLOCKS_PER_SEC;

        
        clock_t inicio_insertion = clock();
        insertionSort(vetor3, n);
        clock_t fim_insertion = clock();
        double tempo_insertion = (double)(fim_insertion - inicio_insertion) / CLOCKS_PER_SEC;

        
        printf("%d\t\t\t%.6f\t\t%.6f\t\t%.6f\n", n, tempo_bubble, tempo_selection, tempo_insertion);
    }

    return 0;
}
